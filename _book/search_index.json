[
["index.html", "Real Estate Market Analysis 1 Prerequisites", " Real Estate Market Analysis Maciej Beręsewicz 2017-05-09 1 Prerequisites Load the required packages library(tidyverse) ## data processing and visualsiation library(zoo) ## parsing quarterly data library(rvest) ## scraping tools library(OECD) ## data from OECD library(eurostat) ## data from eurostat library(nlme) ## mixed models with nice covariance structures library(ggmap) ### plot data on maps library(quantreg) ### library(stringi) ## regular expressions library(lubridate) theme_set(theme_bw()) "],
["intro.html", "2 Introduction 2.1 Basic definitions 2.2 Real estate market – characteristics and functions", " 2 Introduction 2.1 Basic definitions Real estate delimited area of lands with all the buildings and facilities (artificial improvements to lands, such as buildings, sewers, pavements, fences and wells) established on it (common meaning). According to the Code of Civil Proceedings art. 46 §1 (Kodeks Cywilny), real estates are: + parts of the ground surface; + distinct subjects of property (lands); + buildings constantly bound with the ground and parts of the buildings if, based on specific regulations, they represent property right which is different from the ground. Types of real estates - according to the CC (Civil Code - Kodeks Cywilny): land property (nieruchomość gruntowa) – Superficies solo cedit building property (nieruchomość budynkowa) – Perpetual usufruct – użytkowanie wieczyste premises property (nieruchomość lokalowa) – enter in the land and mortgage register Real Estate Market + activities and interactions of entities + economic activity + abstract term + agreements (contracts) + set of legal procedures + forum (place) Real Estate Market – By the real estate market we mean the whole set of conditions which create the frame for the transfer of property rights connected with the ownership of real estates, for contracts setting. These contracts create new rights and obligations for real estates. Criterions used for real estate market division: + subject criterion (according to the type of real estate – its function); + spatial criterion (according to the spatial influence); + property rights criterion (according to the property rights classification: ownership, leasehold, perpetual usufruct, proprietary coop lease ,etc.); + price criterion; According to spatial criterion: + local market; + regional market; + domestic market; + international market; „Actors” acting on real estate market: + investors; + developers; + purchasers and leaseholders; + brokers (pośrednicy); + property managers (zarządcy nieruchomości); + real estate valuers (rzeczoznawcy); + notaries (notariusze); + banks; + state and local governments; 2.2 Real estate market – characteristics and functions Economic characteristics scarcity (rzadkość) permanence (trwałość infrastruktury) improvements (wartość może być powiększona o tzw. naniesienia) area preference (lokalizacja) Physical characteristics non-transferability/immobility (nieprzenaszalność) indestructibility (niezniszczalność) nonhomogenity Legal characteristics ownership of the real estate registrated (mortgage/land registers) special form of land dealings (obrót nieruchomościami) partition of built-up property (difficulty) Real estate market – functions + trade od goods (towar) + lien/pledge (zastaw); + income (dochód); + investments (tezauryzacja, lokowanie środków pieniężnych); + speculation (spekulacja); + property taxes (funkcja fiskalna); Real Estate Market – scope Macro environment Real Estate Stock and Building Activity The Real Estate Industry Demographic Trends Labour Market Data Interest Rates Prices and rents Micro environment Local market Urban / rural Locality, locality, locality… "],
["data-sources.html", "3 Data sources on real estate market 3.1 Basic data sources 3.2 Where we can get these data? 3.3 Obtaining data from the Internet", " 3 Data sources on real estate market 3.1 Basic data sources Land surveying documentation (dokumentacja geodezyjna) Mortgage registers (księgi wieczyste) Notarial deeds (akty notarialne) Reports and results of conducted analysis Surveys (based on questionaires) The Internet Newspaper offers Research on Real Estate Market in Poland by Central Statistical Office (selected) LIVING CONDITIONS, SOCIAL ASSISTANCE 1.25.01(064) Household budgets 1.25.08(067) European Union Statistics on Income and Living Conditions 1.25.12(070) Poverty and social exclusion DWELLINGS, COMMUNAL INFRASTRUCTURE 1.26.01(073) Housing management 1.26.04(074) Property trade 1.26.06(075) Water, sewerage, heating, gas and electricity infrastructure 1.26.08(076) Municipal solid waste and the maintenance of municipalities in a clean and orderly condition 1.26.09(077) A survey of prices of housing and commercial properties 1.26.10(078) Description of housing resources AGRICULTURAL AND FORESTRY ACTIVITIES 1.45.02(124) Land management 1.45.03(125) Land use CONSTRUCTION ACTIVITIES 1.47.01(157) Construction and assembly production; costs listed by function of expense 1.47.04(158) Building permits issued and building notices submitted for the construction of buildings; effects of construction activities 1.47.05(159) Buildings completed 1.47.06(160) Demolition orders issued REGIONAL STUDIES Source: Statistical Research Program of Public Statistics for 2017 3.2 Where we can get these data? Publications: Industry, Construction, Fixed Assets – http://stat.gov.pl/en/topics/industry-construction-fixed-assets/ Municipal infrastructure – http://stat.gov.pl/en/topics/municipal-infrastructure/ Real Estate Sales Municipal infrastructure Housing economy National Census of Population and Housing 2011 Poland - macroeconomic indicators Selected monthly macroeconomic indicators Quarterly macroeconomic indicators Annual macroeconomic indicators Local data bank – https://bdl.stat.gov.pl/BDL/dane/podgrup/temat HOUSING ECONOMY AND MUNICIPAL INFRASTRUCTURE INDUSTRY AND CONSTRUCTION LOCAL GOVERNMENT (eg. taxes) Realized by NBP: 1.26.09(077) Badanie cen nieruchomości mieszkaniowych i komercyjnych Reports: Report on the situation in the Polish residential and commercial real estate market (yearly) House Prices Database - BaRN (2006 Q3 - 2016 Q3) Information on home prices and the situation in the residential and commercial real estate market in Poland (quarterly) Source: http://www.nbp.pl/homen.aspx?f=/en/publikacje/inne/real_estate_market_pre.html 3.3 Obtaining data from the Internet Here we will focus on two packages OECD and eurostat, which allows to download data directly from OECD and Eurostat databases. In the first step we will install these two packages install.packages(c(&#39;OECD&#39;,&#39;eurostat&#39;)) Then, we need to load them library(&#39;eurostat&#39;) library(&#39;OECD&#39;) 3.3.1 OECD package Now, we will focus on OECD package which consist of the following functions browse_metadata – Browse the metadata related to a series. get_dataset – Download OECD data sets. get_datasets – Get a data frame with information on all available datasets. get_data_structure – Get the data structure of a dataset. search_dataset – Search codes and descriptions of available OECD series Let’s check what data sources are related to real estate market. d &lt;- search_dataset(&#39;real estate&#39;) d ## # A tibble: 0 × 2 ## # ... with 2 variables: id &lt;fctr&gt;, title &lt;fctr&gt; Unfortunately, there are no tables that contains this term. Now, we can check property which is a general term for objects on real estate market d &lt;- search_dataset(&#39;Property&#39;) d ## # A tibble: 2 × 2 ## id ## &lt;fctr&gt; ## 1 RPPI ## 2 RPPI_TARGET ## # ... with 1 more variables: title &lt;fctr&gt; We found two indicators RPPI and RPPI_TARGET. We can use function browse_metadata to provide information about these indicators. 3.3.1.1 RPPI – Residential Property Prices Indices RPPI – Residential Property Prices Indices (RPPIs) – also named House price indices (HPIs), are index numbers that measure the price of residential properties over time. RPPIs are key statistics not only for citizens and households across the world, but also for economic and monetary policy makers. Among their professional uses, they serve, for example, to monitor macroeconomic imbalances and risk exposure of the financial sector. Types of dwelling - please note that the classification and terminology may differ significantly from country to country. ‘All type of dwellings’ refers to all kind of dwellings purchased by households regardless of their the structural characteristics, e.g. single-detached houses, semi-detached houses, terraced houses, row houses or townhouses, multi-family apartments, condominiums, and coops, etc. ‘Single-family dwellings’ are generally free standing residential building, e.g. detached house ‘Multi-family dwellings’ are multiple separate housing units for residential inhabitants contained within one building or several buildings within one complex, e.g. apartment building, duplex or semi-detached house, and townhouse. The statistical population is as follows The ‘Residential property Price Indices - Complete database’ dataset mainly contains quarterly statistics and related statistical methodological information for the 34 OECD member countries and for some non-member countries. This dataset focuses on comparable series for 3 target indicators: RPPI - Sales of newly-built and existing dwellings, all types of dwellings, whole country; RPPI - Sales of newly-built dwellings, all types of dwellings, whole country and; RPPI - Sales of existing dwellings, all types of dwellings, whole country. When none of these indicators was available, another one was selected. This is particularly true for Australia, Chile, Korea, Switzerland and the United States. Data are available at a quarterly frequency for all the countries. For Canada, Chile, Israel, Japan, Korea and Turkey monthly data are also available. 3.3.1.2 RPPI_TARGET – Residential Property Prices Indices (Headline indicators) Now, let’s check RPPI_TARGET variable The dataset called “Residential Property Price Indices (RPPIs) – Headline indicators” presents, for each country, the RPPI that is available at the most aggregate level. The ‘Residential property Price Indices - Headline indicators’ mainly contains quarterly statistics and related statistical methodological information for the 34 OECD member countries and some non-member countries. The Price Index based on sales of newly-built and existing dwellings over the whole country (RPPI - Sales of newly-built and existing dwellings, all types of dwellings, whole country) was systematically selected when available. When this indicators was not available, another one was selected. This is particularly true for Switzerland, Canada, Turkey, Japan, Norway, Australia, Greece, Korea and the United States. Data are available at a quarterly frequency for all countries. For Canada, Chile, Israel, Japan, Korea and Turkey monthly data are also available. 3.3.1.3 Obtaining the data First, we should apply function get_data_structure to verify the structure prior downloading headline_struct &lt;- get_data_structure(&#39;RPPI_TARGET&#39;) str(headline_struct,1) ## List of 12 ## $ VAR_DESC :&#39;data.frame&#39;: 12 obs. of 2 variables: ## $ LOCATION :&#39;data.frame&#39;: 46 obs. of 2 variables: ## $ SUBJECT :&#39;data.frame&#39;: 8 obs. of 2 variables: ## $ GEO_COVERAGE :&#39;data.frame&#39;: 3 obs. of 2 variables: ## $ MEASURE :&#39;data.frame&#39;: 3 obs. of 2 variables: ## $ FREQUENCY :&#39;data.frame&#39;: 3 obs. of 2 variables: ## $ TIME :&#39;data.frame&#39;: 977 obs. of 2 variables: ## $ OBS_STATUS :&#39;data.frame&#39;: 14 obs. of 2 variables: ## $ UNIT :&#39;data.frame&#39;: 305 obs. of 2 variables: ## $ POWERCODE :&#39;data.frame&#39;: 32 obs. of 2 variables: ## $ REFERENCEPERIOD:&#39;data.frame&#39;: 78 obs. of 2 variables: ## $ TIME_FORMAT :&#39;data.frame&#39;: 5 obs. of 2 variables: This is a list that contains the following variables headline_struct$VAR_DESC ## id description ## 1 LOCATION Country ## 2 SUBJECT Subject ## 3 GEO_COVERAGE Geographical coverage ## 4 MEASURE Measure ## 5 FREQUENCY Frequency ## 6 TIME Time ## 7 OBS_VALUE Observation Value ## 8 TIME_FORMAT Time Format ## 9 OBS_STATUS Observation Status ## 10 UNIT Unit ## 11 POWERCODE Unit multiplier ## 12 REFERENCEPERIOD Reference period There are three indicators that we could focus on. headline_struct$MEASURE ## id label ## 1 IXOB Index ## 2 GY Percentage change on the same period of the previous year ## 3 GP Percentage change from previous period And have the following frequency headline_struct$FREQUENCY ## id label ## 1 A Annual ## 2 Q Quarterly ## 3 M Monthly For the purpose we will focus only on the following locations POL EU28 CZE HUN headline &lt;- get_dataset(dataset = &#39;RPPI_TARGET&#39;, filter = list(c(&#39;POL&#39;,&#39;EU28&#39;,&#39;CZE&#39;,&#39;HUN&#39;))) %&gt;% filter(FREQUENCY == &#39;Q&#39;) %&gt;% select(LOCATION, obsTime, obsValue,MEASURE) %&gt;% mutate(obsTime = as.yearqtr(obsTime, format = &#39;%Y-Q%q&#39;)) Now, plot the data headline %&gt;% filter(MEASURE == &#39;IXOB&#39;) %&gt;% ggplot(data = ., aes(x = obsTime, y = obsValue, group = LOCATION, colour = LOCATION)) + geom_line() + scale_x_yearqtr() + theme_bw() + ggtitle(&#39;Index (2010 = 100)&#39;) + xlab(&#39;Quarter&#39;) + ylab(&#39;Index&#39;) We can also use these data to plot different index headline %&gt;% filter(MEASURE == &#39;GP&#39;) %&gt;% ggplot(data = ., aes(x = obsTime, y = obsValue, group = LOCATION, colour = LOCATION)) + geom_line() + scale_x_yearqtr() + theme_bw() + ggtitle(&#39;Index (previous period = 100)&#39;) + xlab(&#39;Quarter&#39;) + ylab(&#39;Index&#39;) Now, lets, check the same countries but for the index RPPI. rppi_dict &lt;- get_data_structure(&#39;RPPI&#39;) rppi &lt;- get_dataset(&#39;RPPI&#39;, list(c(&#39;POL&#39;,&#39;EU28&#39;,&#39;CZE&#39;,&#39;HUN&#39;))) %&gt;% filter(FREQUENCY == &#39;Q&#39;, MEASURE == &#39;IXOB&#39;) %&gt;% select(SUBJECT, LOCATION, obsTime, obsValue) %&gt;% mutate(obsTime = as.yearqtr(obsTime, format = &#39;%Y-Q%q&#39;)) Let’s plot the data rppi %&gt;% ggplot(data = ., aes(x = obsTime, y = obsValue, group = LOCATION, colour = LOCATION)) + geom_line() + scale_x_yearqtr() + theme_bw() + ggtitle(&#39;Index (2010 = 100)&#39;) + xlab(&#39;Quarter&#39;) + ylab(&#39;Index&#39;) + facet_wrap(~SUBJECT, labeller = labeller(SUBJECT = c(RP0101=&#39;Sales of newly-built\\nand existing dwellings&#39;, RPEX01=&#39;Sales of existing dwellings&#39;, RPNW01=&#39;Sales of newly-built dwellings&#39;))) "],
["internet-data-sources.html", "4 Internet data sources 4.1 Some theory 4.2 Scraping data from Morizon.pl – step by step 4.3 Scraping data from OtoDom.pl – step by step", " 4 Internet data sources 4.1 Some theory 4.2 Scraping data from Morizon.pl – step by step We enter the following page http://www.morizon.pl/ceny/ which by default loads data for Warsaw. This is presented on Figure 4.1 Figure 4.1: Morizon doc &lt;- read_html(&#39;http://www.morizon.pl/ceny/&#39;) To check where the data is click right mouse and “inspect element”. This is presented on Figure 4.2. Figure 4.2: Morizon – inspect element Search for the line with &lt;script type='text/javascript'&gt;...&lt;/script&gt;. This is presented on Figure 4.3 and 4.4. Figure 4.3: Morizon – script (text/javascript) Figure 4.4: Morizon To get this into R use the following code to gather the data referring to all scripts. Next, we need to look for specific text that is presented on Figure 4.5, in particular we seek for newDate.setYear or newDate.setMonth or newDate.setDate or other from chartData.push scripts &lt;- doc %&gt;% html_nodes(&#39;script&#39;) %&gt;% html_text() Figure 4.5: Morizon flag &lt;- stri_detect(str = scripts, fixed = &#39;newDate.setMonth&#39;) flag ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [12] FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE FALSE FALSE FALSE ## [23] FALSE FALSE selected &lt;- scripts[flag] length(selected) ## [1] 5 Now, we will work only on the one element of selected list for clarity, which refers to overall price for m2. warsaw &lt;- selected[[1]] We need to match the following strings and I provide a regular expression code to extract them. setYear(2006) – setYear\\\\(\\\\d{4}\\\\) setMonth(11) – setMonth\\\\(\\\\d{1,2}\\\\) setDate(1) – setDate\\\\(\\\\d{1,2}\\\\) visits: 8560 – visits\\\\:\\\\s+\\\\d{1,5} prices &lt;- stri_extract(str = warsaw, regex = &#39;visits\\\\:\\\\s+\\\\d{1,5}&#39;, mode = &#39;all&#39;) prices &lt;- unlist(prices) head(prices) ## [1] &quot;visits: 8560&quot; &quot;visits: 8656&quot; &quot;visits: 9017&quot; &quot;visits: 9296&quot; ## [5] &quot;visits: 9366&quot; &quot;visits: 9540&quot; From this, we need to exctract only numeric characters prices &lt;- stri_extract(str = prices, regex = &#39;\\\\d+&#39;, mode = &#39;all&#39;, simplify = T) prices &lt;- as.numeric(prices) plot(prices, type = &#39;l&#39;, xlab = &#39;Time&#39;, ylab = &#39;Price PLN/m2&#39;) 4.3 Scraping data from OtoDom.pl – step by step Figure 4.6: Otodom Figure 4.7: Otodom Figure 4.8: Otodom https://www.otodom.pl/sprzedaz/mieszkanie/poznan/?search%5Bfilter_enum_market%5D%5B0%5D=secondary&amp;search%5Bdescription%5D=1&amp;search%5Bcreated_since%5D=14&amp;search%5Bdist%5D=0 We need to add page numer &amp;page=1, so we will be able to scrape all result pages. https://www.otodom.pl/sprzedaz/mieszkanie/poznan/?search%5Bfilter_enum_market%5D%5B0%5D=secondary&amp;search%5Bdescription%5D=1&amp;search%5Bcreated_since%5D=14&amp;search%5Bdist%5D=0&amp;page=1 url &lt;- &#39;https://www.otodom.pl/sprzedaz/mieszkanie/poznan/?search%5Bfilter_enum_market%5D%5B0%5D=secondary&amp;search%5Bdescription%5D=1&amp;search%5Bcreated_since%5D=14&amp;search%5Bdist%5D=0&amp;page=1&#39; doc &lt;- read_html(url) Figure 4.9: Otodom Figure 4.9: Otodom offers &lt;- doc %&gt;% html_nodes(&#39;div.offer-item-details&#39;) offer_title &lt;- offers %&gt;% html_nodes(&#39;span.offer-item-title&#39;) %&gt;% html_text() head(offer_title) ## [1] &quot;GRUNWALD 2-pok, 50m2 z garażem i skrytką&quot; ## [2] &quot;Ogródek, Kominek, os. Zamknięte - Bliskie Tobie!&quot; ## [3] &quot;Nowe mieszkanie, CYTADELA CENTRUM, deweloper&quot; ## [4] &quot;Kup I Wynajmij Gotowy, Wyposażony Mikroapartament&quot; ## [5] &quot;Armii Krajowej 111 - BEZPOŚREDNIO 3 pok., ogródek&quot; ## [6] &quot;3 pokoje UkładNiezależny Wysoki Standard Winogrady&quot; offer_total_price &lt;- offers %&gt;% html_nodes(&#39;li.offer-item-price&#39;) %&gt;% html_text() %&gt;% stri_replace_all(., rep=&#39;.&#39;,fixed=&#39;,&#39;) %&gt;% stri_replace_all(., rep=&#39;&#39;,regex=&#39;\\\\s+&#39;) %&gt;% stri_extract_all(., regex = &#39;\\\\d+(\\\\.\\\\d+)?&#39;) %&gt;% unlist() %&gt;% as.numeric() head(offer_total_price) ## [1] 305000.0 339000.0 536900.0 220868.6 359000.0 299000.0 offer_floor_area &lt;- offers %&gt;% html_nodes(&#39;li.hidden-xs.offer-item-area&#39;) %&gt;% html_text() %&gt;% stri_replace_all(., rep=&#39;&#39;,regex=&#39;m²|\\\\s+&#39;) %&gt;% stri_replace_all(., rep=&#39;.&#39;,fixed=&#39;,&#39;) %&gt;% unlist() %&gt;% as.numeric() head(offer_floor_area) ## [1] 50.00 72.93 70.92 24.94 65.00 48.00 plot(x = offer_floor_area, y = offer_total_price/1000, xlab = &#39;Floor area (m2)&#39;, ylab = &#39;Price for property in k PLN&#39;) 4.3.1 Full code for Morizon 4.3.1.1 Scrape data for Warsaw We scrape data from Morizon’s web statistics. prices &lt;- &#39;http://www.morizon.pl/ceny/&#39; %&gt;% read_html %&gt;% html_nodes(&#39;script&#39;) %&gt;% html_text() %&gt;% .[stri_detect(str = ., regex = &#39;newDate.setYear&#39;)] %&gt;% stri_extract_all(regex = &#39;setYear\\\\(\\\\d{4}\\\\)|setMonth\\\\(\\\\d{1,2}\\\\)|setDate\\\\(\\\\d{1,2}\\\\)|visits\\\\:\\\\s{1}\\\\d{4,5}&#39;) %&gt;% stri_extract_all(regex = &#39;\\\\d{1,}&#39;) %&gt;% lapply(., function(x) { x %&gt;% as.numeric() %&gt;% matrix(ncol = 4, byrow = T) %&gt;% as.data.frame() %&gt;% rename( year = V1, month = V2, day = V3, pricem2 = V4) %&gt;% mutate(date = ymd(paste(year, month + 1, day, sep = &#39;-&#39;))) }) prices[[1]]$stat &lt;- &#39;overall&#39; prices[[2]]$stat &lt;- &#39;1 room&#39; prices[[3]]$stat &lt;- &#39;2 rooms&#39; prices[[4]]$stat &lt;- &#39;3 rooms&#39; prices[[5]]$stat &lt;- &#39;4 rooms&#39; prices %&gt;% bind_rows() %&gt;% ggplot(data = , aes(x = date, y = pricem2, group = stat, colour = stat)) + geom_line() + labs( x = &#39;Day&#39;, y = &#39;Price / m2&#39;, title = &#39;Average price m2 for Warsaw&#39;, caption = &#39;Source: http://www.morizon.pl/ceny/&#39; ) 4.3.1.2 Scrape data for other cities links &lt;- &#39;http://www.morizon.pl/ceny/&#39; %&gt;% read_html %&gt;% html_nodes(&#39;select.cities_select option&#39;) %&gt;% html_attr(&#39;value&#39;) links &lt;- links[-c(1,17)] prices_cities &lt;- lapply(links, function(x) { x %&gt;% read_html %&gt;% html_nodes(&#39;script&#39;) %&gt;% html_text() %&gt;% .[stri_detect(str = ., regex = &#39;newDate.setYear&#39;)] %&gt;% stri_extract_all(regex = &#39;setYear\\\\(\\\\d{4}\\\\)|setMonth\\\\(\\\\d{1,2}\\\\)|setDate\\\\(\\\\d{1,2}\\\\)|visits\\\\:\\\\s{1}\\\\d{4,5}&#39;) %&gt;% stri_extract_all(regex = &#39;\\\\d{1,}&#39;) %&gt;% unlist() %&gt;% as.numeric() %&gt;% matrix(ncol = 4, byrow = T) %&gt;% as.data.frame() %&gt;% rename( year = V1, month = V2, day = V3, pricem2 = V4) %&gt;% mutate(date = ymd(paste(year, month + 1, day, sep = &#39;-&#39;)), city = stri_replace(str = x, rep = &#39;&#39;, fixed = &#39;http://www.morizon.pl/ceny/&#39;), city = stri_replace(city,&#39;&#39;,fixed=&#39;/&#39;)) }) %&gt;% bind_rows() prices_cities %&gt;% ggplot(data = , aes(x = date, y = pricem2, group = city, colour = city)) + geom_line() + labs( x = &#39;Day&#39;, y = &#39;Price / m2&#39;, title = &#39;Average price m2&#39;, caption = &#39;Source: http://www.morizon.pl/ceny/&#39; ) 4.3.2 Full code for OtoDom "],
["characteristics-of-real-estate-market-in-poland-and-europe.html", "5 Characteristics of Real Estate Market in Poland and Europe", " 5 Characteristics of Real Estate Market in Poland and Europe We describe our methods in this chapter. "],
["descriptives-statistics-as-basic-method-of-analysis-of-real-estate-market.html", "6 Descriptives statistics as basic method of analysis of Real Estate Market", " 6 Descriptives statistics as basic method of analysis of Real Estate Market We describe our methods in this chapter. "],
["data-cleaning-techniques-and-outliers-detection.html", "7 Data cleaning techniques and outliers detection 7.1 Outliers and influence measures", " 7 Data cleaning techniques and outliers detection 7.1 Outliers and influence measures Leverage given by \\[ h_i = \\frac{1}{n} + \\frac{(X_i - \\overline{X})}{\\sum(X_i - \\overline{X})^2} \\] Studentized residuals given by \\[ e_{i}^{*}=\\frac{e_i}{S_{e(-1)}\\sqrt{1-h_i}} \\] where: \\(e_i\\) - residual, \\(S_{e(-1)}\\) - standard error of the regression without i-th observation. Studentized residuals follow t-distribution with \\(n-k-2\\) degress of freedom. Cook distance \\[ D_i=\\frac{e_i}{k+1}\\frac{h_i}{1-h_i} \\] where \\(k\\) – number of dependent variables, \\(h_i = \\frac{1}{n} + \\frac{(X_i - \\overline{X})}{\\sum(X_i - \\overline{X})^2}\\) , \\(MSE=\\frac{1}{n}\\sum_{i=1}^n(\\hat{Y}_i-Y_i)^2\\) outliers meet: \\[ D_i&gt;\\frac{4}{n-k-1} \\] DFBETA measures change in estimates of regression parameters when we remove one observation \\[ DFBETA_i=(\\sum_{i \\in s} \\mathbf{x}_i\\mathbf{x}_i^T)^{-1}\\mathbf{x}_i\\frac{e_i}{1-\\mathbf{x}_i^T(\\sum_{i \\in s} \\mathbf{x}_i\\mathbf{x}_i^T)^{-1}\\mathbf{x}_i} \\] DFBETAS - standarised version of DFBETA. Measures influence in units of standard error of regression. \\[ DFBETAS_i=\\frac{\\hat{\\mathbf{\\beta}}-\\hat{\\mathbf{\\beta}}_{(-i)}}{\\sqrt{MSE_{(-i)}}}=\\frac{DFBETA_i}{\\sqrt{MSE_{(-i)}}} \\] Outliers meet: \\(|DFBETAS_i|&gt;2\\) - small samples \\(DFBETAS_i&gt;\\frac{2}{\\sqrt{n}}\\) DFFITS – measures global difference between model with and without i observation. \\[ DFFITS_i=\\frac{e_i\\sqrt{\\frac{h_i}{1-h_i}}}{\\sqrt{MSE_{(-i)}}\\sqrt{{1-h_i}}} \\] Outliers meet \\(|DFFITS_i| &gt; 2\\sqrt{\\frac{p+1}{n-k-1}}\\) CovRatio – measures influence on variance of regression coefficients \\[ COVRATIO_i=\\frac{1}{(\\frac{n-k-2+t_i^2}{n-k-1})^{k+2}}\\frac{1}{(1-h_i)} \\] where \\(h_i\\) is the same as in Cook’s distance, \\(t_i\\) is defined \\[ t_i=\\frac{e_i}{\\sqrt{MSE_{(-i)}}\\sqrt{{1-h_i}}} \\] Interpretation: \\(COVRATIO_i &lt; 1\\) - elimination of \\(i\\) th unit/observation will reduce standard errors of regression coefficients \\(COVRATIO_i &gt; 1\\) - elimination of \\(i\\) th unit/observation will increase standard errors of regression coefficients it is suggested to use sample size dependent thresholds \\[ |COVRATIO_i-1| &gt; 3(k+1)/n \\] "],
["indices.html", "8 Indices", " 8 Indices "],
["regression.html", "9 Regression", " 9 Regression "],
["gis-tools.html", "10 GIS Tools", " 10 GIS Tools "],
["spatial-models.html", "11 Spatial models", " 11 Spatial models "],
["forecasting.html", "12 Forecasting", " 12 Forecasting "],
["references.html", "13 References", " 13 References "],
["additional-topics.html", "14 Additional topics 14.1 Regular expressions 14.2 Examples", " 14 Additional topics 14.1 Regular expressions 14.1.1 Introduction to stringi package I recommed to use either stringr or stringi package in order to process strings and extract characters with regular expression. In this chapter I will show how to use latter. Please note that a comprehensive description of the stringi package can be found in Marek Gągolewski’s Programowanie w R book, chapter 10. Currently there is no tutorial in English 14.1.2 Basic notation In regular expression w use metacharacters: \\ – start escape characters | – denotes OR ( and ) – group denotation [ and ] – { and } – specify number of occurences ^ – starts a specific character $ – end with a specific character * – + – one or more time ? – 0 or more times In addition to above we have [:alnum:] – Alphanumeric characters: [:alpha:] and [:digit:]. [:alpha:] – Alphabetic characters: [:lower:] and [:upper:]. [:blank:] – Blank characters: space and tab, and possibly other locale-dependent characters such as non-breaking space. [:cntrl:] – Control characters. In ASCII, these characters have octal codes 000 through 037, and 177 (DEL). In another character set, these are the equivalent characters, if any. [:digit:] – Digits: 0 1 2 3 4 5 6 7 8 9. [:graph:] – Graphical characters: [:alnum:] and [:punct:]. [:lower:] – Lower-case letters in the current locale. [:print:] – Printable characters: [:alnum:], [:punct:] and space. [:punct:] – Punctuation characters: ! &quot; # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \\ ] ^ _ { | } ~`. [:space:] – Space characters: tab, newline, vertical tab, form feed, carriage return, space and possibly other locale-dependent characters. [:upper:] – Upper-case letters in the current locale. [:xdigit:] – Hexadecimal digits: 0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e 14.2 Examples Let assume, that we have the following sentence This property has 44.52 m2, 3 rooms and costs 150 430 PLN. string &lt;- &#39;This property has 44.52 m2, 3 rooms and costs 150 430 PLN.&#39; 14.2.1 Extract digits stri_extract(str = string, regex = &#39;[:digit:]&#39;) ## [1] &quot;4&quot; ## the same as stri_extract(str = string, regex = &#39;\\\\d&#39;) stri_extract(str = string, regex = &#39;[:digit:]&#39;, mode = &#39;all&#39;) ## [[1]] ## [1] &quot;4&quot; &quot;4&quot; &quot;5&quot; &quot;2&quot; &quot;2&quot; &quot;3&quot; &quot;1&quot; &quot;5&quot; &quot;0&quot; &quot;4&quot; &quot;3&quot; &quot;0&quot; ## the same as stri_extract(str = string, regex = &#39;\\\\d&#39;, mode = &#39;all&#39;) ## we will use \\\\d notatio hereinafter We can add + to indicate that we are interested in extracting one or more digit stri_extract(str = string, regex = &#39;\\\\d+&#39;, mode = &#39;all&#39;) ## [[1]] ## [1] &quot;44&quot; &quot;52&quot; &quot;2&quot; &quot;3&quot; &quot;150&quot; &quot;430&quot; Now, we are interested in extrating number of rooms. For that we will use word rooms. stri_extract(str = string, regex = &#39;\\\\d rooms&#39;, mode = &#39;all&#39;) ## [[1]] ## [1] &quot;3 rooms&quot; stri_extract(str = string, regex = &#39;\\\\d{1,2} rooms&#39;, mode = &#39;all&#39;) ## we specify that only digits from one to two digits will be present ## [[1]] ## [1] &quot;3 rooms&quot; This result can be further processed but we will leave this for your own excercise. Now, we will follow to extract floor area. stri_extract(str = string, regex = &#39;\\\\d{1,3}\\\\.\\\\d{1,2} m2&#39;, mode = &#39;all&#39;) ## [[1]] ## [1] &quot;44.52 m2&quot; When this will work? stri_extract(str = c(&#39;24.23 m2&#39;,&#39;55 m2&#39;, &#39;124.53 m2&#39;), regex = &#39;\\\\d{1,3}\\\\.\\\\d{1,2} m2&#39;, mode = &#39;all&#39;) ## [[1]] ## [1] &quot;24.23 m2&quot; ## ## [[2]] ## [1] NA ## ## [[3]] ## [1] &quot;124.53 m2&quot; The second argument was not extracted. What should we do in this case? How to modify this code? stri_extract(str = c(&#39;24.23 m2&#39;,&#39;55 m2&#39;, &#39;124.53 m2&#39;), regex = &#39;\\\\d{1,3}(\\\\.\\\\d{1,2})? m2&#39;, mode = &#39;all&#39;) ## [[1]] ## [1] &quot;24.23 m2&quot; ## ## [[2]] ## [1] &quot;55 m2&quot; ## ## [[3]] ## [1] &quot;124.53 m2&quot; Next we just need to remove m2 or we need to take into account that m2 will not be taken into account during extraction. "]
]
